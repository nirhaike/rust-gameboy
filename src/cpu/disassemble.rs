// Copyright 2021 Nir H. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

//! Cpu instruction disassembler.
use super::Cpu;
use crate::GameboyError;

/// Returns a string that describes the opcode at the given address.
pub fn disassemble<'a>(cpu: &'a Cpu, address: u16) -> Result<&'static str, GameboyError> {
	// Get the opcode at the given address.
	let mut opcode: u16 = cpu.mmap.read(address)? as u16;

	if opcode == 0xcb {
		opcode <<= 8;
		opcode |= cpu.mmap.read(address + 1)? as u16;
	}

	let disassembly = match opcode {
		0x00 => "nop",
		0x01 => "ld BC, nn",
		0x02 => "ld (BC), A",
		0x03 => "inc BC",
		0x04 => "inc B",
		0x05 => "dec B",
		0x06 => "ld B, n",
		0x08 => "ld (nn), SP",
		0x09 => "add HL, BC",
		0x0a => "ld A, (BC)",
		0x0b => "dec BC",
		0x0c => "inc C",
		0x0d => "dec C",
		0x0e => "ld C, n",
		0x11 => "ld DE, nn",
		0x12 => "ld (DE), A",
		0x13 => "inc DE",
		0x14 => "inc D",
		0x15 => "dec D",
		0x16 => "ld D, n",
		0x18 => "jr n",
		0x19 => "add HL, DE",
		0x1a => "ld A, (DE)",
		0x1b => "dec DE",
		0x1c => "inc E",
		0x1d => "dec E",
		0x1e => "ld E, n",
		0x20 => "jr NZ, n",
		0x21 => "ld HL, nn",
		0x22 => "ld (HL+), A",
		0x23 => "inc HL",
		0x24 => "inc H",
		0x25 => "dec H",
		0x26 => "ld H, n",
		0x28 => "jr Z, n",
		0x29 => "add HL, HL",
		0x2a => "ld A, (HL+)",
		0x2b => "dec HL",
		0x2c => "inc L",
		0x2d => "dec L",
		0x2e => "ld L, n",
		0x2f => "cpl",
		0x30 => "jr NC, n",
		0x31 => "ld SP, nn",
		0x32 => "ld (HL-), A",
		0x33 => "inc SP",
		0x34 => "inc (HL)",
		0x35 => "dec (HL)",
		0x36 => "ld (HL), n",
		0x37 => "scf",
		0x38 => "jr C, n",
		0x39 => "add HL, SP",
		0x3a => "ld A, (HL-)",
		0x3b => "dec SP",
		0x3c => "inc A",
		0x3d => "dec A",
		0x3e => "ld A, #",
		0x40 => "ld B, B",
		0x41 => "ld B, C",
		0x42 => "ld B, D",
		0x43 => "ld B, E",
		0x44 => "ld B, H",
		0x45 => "ld B, L",
		0x46 => "ld B, (HL)",
		0x47 => "ld B, A",
		0x48 => "ld C, B",
		0x49 => "ld C, C",
		0x4a => "ld C, D",
		0x4b => "ld C, E",
		0x4c => "ld C, H",
		0x4d => "ld C, L",
		0x4e => "ld C, (HL)",
		0x4f => "ld C, A",
		0x50 => "ld D, B",
		0x51 => "ld D, C",
		0x52 => "ld D, D",
		0x53 => "ld D, E",
		0x54 => "ld D, H",
		0x55 => "ld D, L",
		0x56 => "ld D, (HL)",
		0x57 => "ld D, A",
		0x58 => "ld E, B",
		0x59 => "ld E, C",
		0x5a => "ld E, D",
		0x5b => "ld E, E",
		0x5c => "ld E, H",
		0x5d => "ld E, L",
		0x5e => "ld E, (HL)",
		0x5f => "ld E, A",
		0x60 => "ld H, B",
		0x61 => "ld H, C",
		0x62 => "ld H, D",
		0x63 => "ld H, E",
		0x64 => "ld H, H",
		0x65 => "ld H, L",
		0x66 => "ld H, (HL)",
		0x67 => "ld H, A",
		0x68 => "ld L, B",
		0x69 => "ld L, C",
		0x6a => "ld L, D",
		0x6b => "ld L, E",
		0x6c => "ld L, H",
		0x6d => "ld L, L",
		0x6e => "ld L, (HL)",
		0x6f => "ld L, A",
		0x70 => "ld (HL), B",
		0x71 => "ld (HL), C",
		0x72 => "ld (HL), D",
		0x73 => "ld (HL), E",
		0x74 => "ld (HL), H",
		0x75 => "ld (HL), L",
		0x76 => "halt",
		0x77 => "ld (HL), A",
		0x78 => "ld A, B",
		0x79 => "ld A, C",
		0x7a => "ld A, D",
		0x7b => "ld A, E",
		0x7c => "ld A, H",
		0x7d => "ld A, L",
		0x7e => "ld A, (HL)",
		0x7f => "ld A, A",
		0x80 => "add A, B",
		0x81 => "add A, C",
		0x82 => "add A, D",
		0x83 => "add A, E",
		0x84 => "add A, H",
		0x85 => "add A, L",
		0x86 => "add A, (HL)",
		0x87 => "add A, A",
		0x88 => "adc A, B",
		0x89 => "adc A, C",
		0x8a => "adc A, D",
		0x8b => "adc A, E",
		0x8c => "adc A, H",
		0x8d => "adc A, L",
		0x8e => "adc A, (HL)",
		0x8f => "adc A, A",
		0x90 => "sub A, B",
		0x91 => "sub A, C",
		0x92 => "sub A, D",
		0x93 => "sub A, E",
		0x94 => "sub A, H",
		0x95 => "sub A, L",
		0x96 => "sub A, (HL)",
		0x97 => "sub A, A",
		0x98 => "sbc A, B",
		0x99 => "sbc A, C",
		0x9a => "sbc A, D",
		0x9b => "sbc A, E",
		0x9c => "sbc A, H",
		0x9d => "sbc A, L",
		0x9e => "sbc A, (HL)",
		0x9f => "sbc A, A",
		0xa0 => "and A, B",
		0xa1 => "and A, C",
		0xa2 => "and A, D",
		0xa3 => "and A, E",
		0xa4 => "and A, H",
		0xa5 => "and A, L",
		0xa6 => "and A, (HL)",
		0xa7 => "and A, A",
		0xa8 => "xor A, B",
		0xa9 => "xor A, C",
		0xaa => "xor A, D",
		0xab => "xor A, E",
		0xac => "xor A, H",
		0xad => "xor A, L",
		0xae => "xor A, (HL)",
		0xaf => "xor A, A",
		0xb0 => "or A, B",
		0xb1 => "or A, C",
		0xb2 => "or A, D",
		0xb3 => "or A, E",
		0xb4 => "or A, H",
		0xb5 => "or A, L",
		0xb6 => "or A, (HL)",
		0xb7 => "or A, A",
		0xb8 => "cp A, B",
		0xb9 => "cp A, C",
		0xba => "cp A, D",
		0xbb => "cp A, E",
		0xbc => "cp A, H",
		0xbd => "cp A, L",
		0xbe => "cp A, (HL)",
		0xbf => "cp A, A",
		0xc0 => "ret NZ",
		0xc1 => "pop BC",
		0xc2 => "jp NZ, nn",
		0xc3 => "jp nn",
		0xc4 => "call NZ, nn",
		0xc5 => "push BC",
		0xc6 => "add A, #",
		0xc8 => "ret Z",
		0xc9 => "ret",
		0xca => "jp Z, nn",
		0xcc => "call Z, nn",
		0xcd => "call nn",
		0xce => "adc A, #",
		0xd0 => "ret NC",
		0xd1 => "pop DE",
		0xd2 => "jp NC, nn",
		0xd4 => "call NC, nn",
		0xd8 => "ret C",
		0xd9 => "reti",
		0xda => "jp C, nn",
		0xdc => "call C, nn",
		0xd5 => "push DE",
		0xd6 => "sub A, #",
		0xe0 => "ld (n), A",
		0xe1 => "pop HL",
		0xe2 => "ld (C), A",
		0xe5 => "push HL",
		0xe6 => "and A, #",
		0xe9 => "jp (HL)",
		0xea => "ld (nn), A",
		0xee => "xor A, #",
		0xf0 => "ldh A, (n)",
		0xf1 => "pop AF",
		0xf2 => "ld A, (C)",
		0xf3 => "di",
		0xf5 => "push AF",
		0xf6 => "or A, #",
		0xf8 => "ld HL, SP+n",
		0xf9 => "ld SP, HL",
		0xfa => "ld A, (nn)",
		0xfb => "ei",
		0xfe => "cp A, #",
		0xcb18 => "rr B",
		0xcb19 => "rr C",
		0xcb1a => "rr D",
		0xcb1b => "rr E",
		0xcb1c => "rr H",
		0xcb1d => "rr L",
		0xcb1e => "rr (HL)",
		0xcb1f => "rr A",
		0xcb30 => "swap B",
		0xcb31 => "swap C",
		0xcb32 => "swap D",
		0xcb33 => "swap E",
		0xcb34 => "swap H",
		0xcb35 => "swap L",
		0xcb36 => "swap (HL)",
		0xcb37 => "swap A",
		0xcb40 => "bit 0, B",
		0xcb41 => "bit 0, C",
		0xcb42 => "bit 0, D",
		0xcb43 => "bit 0, E",
		0xcb44 => "bit 0, H",
		0xcb45 => "bit 0, L",
		0xcb46 => "bit 0, (HL)",
		0xcb47 => "bit 0, A",
		0xcb48 => "bit 1, B",
		0xcb49 => "bit 1, C",
		0xcb4a => "bit 1, D",
		0xcb4b => "bit 1, E",
		0xcb4c => "bit 1, H",
		0xcb4d => "bit 1, L",
		0xcb4e => "bit 1, (HL)",
		0xcb4f => "bit 1, A",
		0xcb50 => "bit 2, B",
		0xcb51 => "bit 2, C",
		0xcb52 => "bit 2, D",
		0xcb53 => "bit 2, E",
		0xcb54 => "bit 2, H",
		0xcb55 => "bit 2, L",
		0xcb56 => "bit 2, (HL)",
		0xcb57 => "bit 2, A",
		0xcb58 => "bit 3, B",
		0xcb59 => "bit 3, C",
		0xcb5a => "bit 3, D",
		0xcb5b => "bit 3, E",
		0xcb5c => "bit 3, H",
		0xcb5d => "bit 3, L",
		0xcb5e => "bit 3, (HL)",
		0xcb5f => "bit 3, A",
		0xcb60 => "bit 4, B",
		0xcb61 => "bit 4, C",
		0xcb62 => "bit 4, D",
		0xcb63 => "bit 4, E",
		0xcb64 => "bit 4, H",
		0xcb65 => "bit 4, L",
		0xcb66 => "bit 4, (HL)",
		0xcb67 => "bit 4, A",
		0xcb68 => "bit 5, B",
		0xcb69 => "bit 5, C",
		0xcb6a => "bit 5, D",
		0xcb6b => "bit 5, E",
		0xcb6c => "bit 5, H",
		0xcb6d => "bit 5, L",
		0xcb6e => "bit 5, (HL)",
		0xcb6f => "bit 5, A",
		0xcb70 => "bit 6, B",
		0xcb71 => "bit 6, C",
		0xcb72 => "bit 6, D",
		0xcb73 => "bit 6, E",
		0xcb74 => "bit 6, H",
		0xcb75 => "bit 6, L",
		0xcb76 => "bit 6, (HL)",
		0xcb77 => "bit 6, A",
		0xcb78 => "bit 7, B",
		0xcb79 => "bit 7, C",
		0xcb7a => "bit 7, D",
		0xcb7b => "bit 7, E",
		0xcb7c => "bit 7, H",
		0xcb7d => "bit 7, L",
		0xcb7e => "bit 7, (HL)",
		0xcb7f => "bit 7, A",
		0xcb80 => "res 0, B",
		0xcb81 => "res 0, C",
		0xcb82 => "res 0, D",
		0xcb83 => "res 0, E",
		0xcb84 => "res 0, H",
		0xcb85 => "res 0, L",
		0xcb86 => "res 0, (HL)",
		0xcb87 => "res 0, A",
		0xcb88 => "res 1, B",
		0xcb89 => "res 1, C",
		0xcb8a => "res 1, D",
		0xcb8b => "res 1, E",
		0xcb8c => "res 1, H",
		0xcb8d => "res 1, L",
		0xcb8e => "res 1, (HL)",
		0xcb8f => "res 1, A",
		0xcb90 => "res 2, B",
		0xcb91 => "res 2, C",
		0xcb92 => "res 2, D",
		0xcb93 => "res 2, E",
		0xcb94 => "res 2, H",
		0xcb95 => "res 2, L",
		0xcb96 => "res 2, (HL)",
		0xcb97 => "res 2, A",
		0xcb98 => "res 3, B",
		0xcb99 => "res 3, C",
		0xcb9a => "res 3, D",
		0xcb9b => "res 3, E",
		0xcb9c => "res 3, H",
		0xcb9d => "res 3, L",
		0xcb9e => "res 3, (HL)",
		0xcb9f => "res 3, A",
		0xcba0 => "res 4, B",
		0xcba1 => "res 4, C",
		0xcba2 => "res 4, D",
		0xcba3 => "res 4, E",
		0xcba4 => "res 4, H",
		0xcba5 => "res 4, L",
		0xcba6 => "res 4, (HL)",
		0xcba7 => "res 4, A",
		0xcba8 => "res 5, B",
		0xcba9 => "res 5, C",
		0xcbaa => "res 5, D",
		0xcbab => "res 5, E",
		0xcbac => "res 5, H",
		0xcbad => "res 5, L",
		0xcbae => "res 5, (HL)",
		0xcbaf => "res 5, A",
		0xcbb0 => "res 6, B",
		0xcbb1 => "res 6, C",
		0xcbb2 => "res 6, D",
		0xcbb3 => "res 6, E",
		0xcbb4 => "res 6, H",
		0xcbb5 => "res 6, L",
		0xcbb6 => "res 6, (HL)",
		0xcbb7 => "res 6, A",
		0xcbb8 => "res 7, B",
		0xcbb9 => "res 7, C",
		0xcbba => "res 7, D",
		0xcbbb => "res 7, E",
		0xcbbc => "res 7, H",
		0xcbbd => "res 7, L",
		0xcbbe => "res 7, (HL)",
		0xcbbf => "res 7, A",
		_ => "unk"
	};

	Ok(disassembly)
}
